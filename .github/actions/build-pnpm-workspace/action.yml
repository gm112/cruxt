name: 'Build pnpm workspace'
description: 'Runs pnpm install, lints, and builds the project'
inputs:
  upload-coverage:
    description: 'Upload coverage reports to Codecov'
    required: false
    default: 'false'
  upload-build-artifacts:
    description: 'Upload build artifacts to GitHub'
    required: false
    default: 'false'
  overwrite-build-artifacts:
    description: 'Overwrite existing build artifacts'
    required: false
    default: 'false'
runs:
  using: 'composite'
  steps:
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        run_install: false
    - name: Setup Node
      uses: actions/setup-node@v5
      with:
        node-version-file: .nvmrc
        cache: pnpm

    - name: Install dependencies
      shell: bash
      run: |
        echo "Verifying corepack and pnpm versions."

        COREPACK_EXISTS=$(command -v corepack)
        PNPM_RUNTIME_VERSION="pnpm@$(pnpm --version | cut -d' ' -f3)"
        PACKAGE_JSON_PACKAGE_MANAGER_VERSION=$(cat package.json | grep -o '"packageManager":\s*"[^"]*"' | cut -d'"' -f4)
        PACKAGE_JSON_PNPM_VERSION=$(echo $PACKAGE_JSON_PACKAGE_MANAGER_VERSION | cut -d'+' -f1)

        PNPM_RUNTIME_MATCHES_PACKAGE_JSON=$([[ $PNPM_RUNTIME_VERSION == $PACKAGE_JSON_PNPM_VERSION ]] && echo true || echo false)
        if [ ! "$COREPACK_EXISTS" ] || [ $PNPM_RUNTIME_MATCHES_PACKAGE_JSON == "false" ]; then
          echo "Updating corepack"
          npm install -g corepack@latest
        fi

        if [ $PNPM_RUNTIME_MATCHES_PACKAGE_JSON == "false" ]; then
          echo "Setting up pnpm with corepack."
          corepack enable
        fi

        echo "Installing dependencies"
        pnpm install --frozen-lockfile

    - name: Validate Code Formatting
      shell: bash
      run: echo "Validating Code Formatting" && pnpm run --parallel lint

    - name: Build Projects
      shell: bash
      run: echo "Building Projects" && pnpm run --parallel build

    - name: Test Projects
      shell: bash
      run: echo "Testing Projects" && pnpm run --parallel test

    # - name: Retrieve Build Artifacts
    #   if: inputs.upload-build-artifacts == 'true'
    #   shell: bash
    #   run: |
    #     echo "Grabbing Build Artifacts"

    #     mkdir -p ./.output
    #     # Move all .output directories in the projects/{project-name} directories in ./projects/, using the project folder name as a parent folder name in ./.output/.
    #     find ./projects -mindepth 1 -maxdepth 1 -type d -exec bash -c 'mv "$1"/.output "$1"/../' {} \;

    - name: Upload Build Artifacts
      if: inputs.upload-build-artifacts == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: ./projects/**/.output
        if-no-files-found: error
        overwrite: ${{ inputs.overwrite-build-artifacts }}


