# Documentation can be found at file://./README.md
name: 'Build pnpm workspace'
description: 'Runs pnpm install, lints, and builds the project'
inputs:
  upload-coverage:
    description: 'Upload coverage reports to Codecov'
    required: false
    default: 'false'
  upload-build-artifacts:
    description: 'Upload build artifacts to GitHub'
    required: false
    default: 'false'
  overwrite-build-artifacts:
    description: 'Overwrite existing build artifacts'
    required: false
    default: 'false'
  build-output-directory:
    description: 'Directory to output build artifacts'
    required: false
    default: '.output'
  upload-artifact-name:
    description: 'Name of the artifact to upload'
    required: false
    default: ${{ github.workflow }}-${{ github.sha }}

outputs:
  build-artifacts-path:
    description: 'Path to the build artifacts'
    value: ${{ steps.upload-build-artifacts.outputs.artifact-path }}
  build-artifacts-name:
    description: 'Name of the build artifacts'
    value: ${{ steps.upload-build-artifacts.outputs.artifact-name }}

runs:
  using: 'composite'
  steps:
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        run_install: false
    - name: Setup Node
      uses: actions/setup-node@v5
      with:
        node-version-file: .nvmrc
        cache: pnpm

    - name: Install dependencies
      shell: bash
      run: |
        echo "Verifying corepack and pnpm versions."

        COREPACK_EXISTS=$(command -v corepack)
        PNPM_RUNTIME_VERSION="pnpm@$(pnpm --version | cut -d' ' -f3)"
        PACKAGE_JSON_PACKAGE_MANAGER_VERSION=$(cat package.json | grep -o '"packageManager":\s*"[^"]*"' | cut -d'"' -f4)
        PACKAGE_JSON_PNPM_VERSION=$(echo $PACKAGE_JSON_PACKAGE_MANAGER_VERSION | cut -d'+' -f1)

        PNPM_RUNTIME_MATCHES_PACKAGE_JSON=$([[ $PNPM_RUNTIME_VERSION == $PACKAGE_JSON_PNPM_VERSION ]] && echo true || echo false)
        if [ ! "$COREPACK_EXISTS" ] || [ $PNPM_RUNTIME_MATCHES_PACKAGE_JSON == "false" ]; then
          echo "Updating corepack"
          npm install -g corepack@latest
        fi

        if [ $PNPM_RUNTIME_MATCHES_PACKAGE_JSON == "false" ]; then
          echo "Setting up pnpm with corepack."
          corepack enable
        fi

        echo "Installing dependencies"
        pnpm install --frozen-lockfile

    - name: Build Projects and Validate Code Formatting
      shell: bash
      run: |
        echo "Building Projects"
        pnpm run build:all & build_pid=$!

        echo "Validating Code Formatting"
        pnpm run lint:all & lint_pid=$!

        echo "Testing Projects"
        pnpm run test:all & test_pid=$!

        wait $build_pid; build_exit_code=$?
        wait $lint_pid; lint_exit_code=$?
        wait $test_pid; test_exit_code=$?

        if [ $build_exit_code -ne 0 ] || [ $lint_exit_code -ne 0 ] || [ $test_exit_code -ne 0 ]; then
          echo "Build, lint, or test failed. Exiting." >&2
          exit 1
        fi

    - name: Upload Build Artifacts
      if: inputs.upload-build-artifacts == 'true'
      uses: actions/upload-artifact@v4
      id: upload-build-artifacts
      with:
        name: ${{ inputs.upload-artifact-name }}
        path: ${{ inputs.build-output-directory }}
        include-hidden-files: true # Workaround for .output directory not being included.
        overwrite: ${{ inputs.overwrite-build-artifacts }}

    - name: Forward Build Artifacts to outputs
      if: inputs.upload-build-artifacts == 'true'
      shell: bash
      run: |
        echo "build-artifacts-path=${{ steps.upload-build-artifacts.outputs.artifact-path }}" >> $GITHUB_OUTPUT
        echo "build-artifacts-name=${{ steps.upload-build-artifacts.outputs.artifact-name }}" >> $GITHUB_OUTPUT



